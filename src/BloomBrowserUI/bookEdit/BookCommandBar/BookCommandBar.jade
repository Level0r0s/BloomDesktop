html(charset="utf-8")
	head
		meta(content="text/html;charset=utf-8", http-equiv="Content-Type")
		meta(content="utf-8", http-equiv="encoding")
		link(rel='stylesheet', href='http://localhost:8089/bloom/bookEdit/BookCommandBar/BookCommandBar.css')
		script(src='http://localhost:8089/bloom/lib/jquery-1.10.1.js')
		script(src='http://localhost:8089/bloom/lib/jquery-ui-1.10.3.custom.min.js')
		script(src='http://localhost:8089/bloom/lib/react.js')
	body()
		script.
			var button = React.createFactory('button');
			var div = React.createFactory('div');
			var bloomButton = React.createClass({
				render: function () {
					//alert(this.props.enabled);
					var className = this.props.enabled ? "enabled" : "disabled";
					return ( button({id: this.props.id, className: className}, this.props.text));
				}});
			var bloomButtonFactory = React.createFactory(bloomButton);

			var ButtonRow = React.createClass({displayName: 'ButtonRow',
				render: function() {
					console.log(this.props.duplicateCurrentPage_enabled, this.props.deleteCurrentPage_enabled);
					return (div(null,[
							bloomButtonFactory({text: 'dup', id: 'duplicateCurrentPage', enabled:this.props.duplicateCurrentPage_enabled, key:'duplicateCurrentPage'}),
							bloomButtonFactory({text: 'del', id: 'deleteCurrentPage', enabled: this.props.deleteCurrentPage_enabled, key: 'deleteCurrentPage'})
						]));
				}
			});

			var model = {duplicateCurrentPage_enabled: true,
									deleteCurrentPage_enabled: false
			};

			React.render(React.createElement(ButtonRow, model), document.body);
			//show how the model can change
			model.duplicateCurrentPage_enabled = false;
			React.render(React.createElement(ButtonRow, model), document.body);

		script.
			$("button").click(function (e) {
				//we store the command in the id; we just need to prepend
				//a bit of url path to it that is common to all book commands
				$.ajax("/bloom/command/book/"+$(this).attr('id'));
				e.preventDefault();
			});